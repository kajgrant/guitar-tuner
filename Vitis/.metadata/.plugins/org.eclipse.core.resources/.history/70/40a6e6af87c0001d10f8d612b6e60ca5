
//////////////////////////////////////////////////////////////////////////////////
//
// Company:        Xilinx
// Engineer:       bwiec
// Create Date:    29 June 2015, 03:34:03 PM
// App Name:       DMA Accelerator Demonstration
// File Name:      helloworld.c
// Target Devices: Zynq
// Tool Versions:  2015.1
// Description:    Implementation of FFT using a hardware accelerator with DMA.
// Dependencies:
//   - xuartps_hw.h - Driver version v3.0
//   - fft.h        - Driver version v1.0
//   - cplx_data.h  - Driver version v1.0
//   - stim.h       - Driver version v1.0
// Revision History:
//   - v1.0
//     * Initial release
//     * Tested on ZC702 and Zedboard
// Additional Comments:
//   - UART baud rate is 115200
//   - GPIO is used with some additional glue logic to control the FFT core's
//     config interface for setting various parameters.
//
//////////////////////////////////////////////////////////////////////////////////

// Includes
#include <stdio.h>
#include <stdlib.h>
#include "xuartps_hw.h"
#include "fft.h"
#include "hps.h"
#include "cplx_data.h"
#include "stim.h"
#include "xbasic_types.h"

#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR
Xuint32 *baseaddr_p = (Xuint32 *)XPAR_CUSTOM_HPS_1_S00_AXI_BASEADDR;

// External data
extern int test_data[FFT_MAX_NUM_PTS]; // FFT input data

// Function prototypes
void which_fft_param(fft_t *p_fft_inst);

void init_uart()
{
	u32 CntrlRegister;
	CntrlRegister = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_CR_OFFSET);

	XUartPs_WriteReg(UART_BASEADDR, XUARTPS_CR_OFFSET,
					 ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
					  XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));
}

// Main entry point
int main()
{

	// Local variables
	int status = 0;
	fft_t *p_fft_inst;
	cplx_data_t *stim_buf;
	cplx_data_t *result_buf;
	short *convert_buf;

	// Setup UART and enable caches
	init_uart();
	xil_printf("\fHello World!\n\r");

	// Create FFT object
	p_fft_inst = fft_create(
		XPAR_GPIO_0_DEVICE_ID,
		XPAR_AXIDMA_0_DEVICE_ID,
		XPAR_PS7_SCUGIC_0_DEVICE_ID,
		XPAR_FABRIC_CTRL_AXI_DMA_0_S2MM_INTROUT_INTR,
		XPAR_FABRIC_CTRL_AXI_DMA_0_MM2S_INTROUT_INTR);
	if (p_fft_inst == NULL)
	{
		xil_printf("ERROR! Failed to create FFT instance.\n\r");
		return -1;
	}

	fft_set_num_pts(p_fft_inst, 1024);

	// Allocate data buffers
	stim_buf = (cplx_data_t *)malloc(sizeof(cplx_data_t) * FFT_MAX_NUM_PTS);
	if (stim_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the stimulus buffer.\n\r");
		return -1;
	}

	result_buf = (cplx_data_t *)malloc(sizeof(cplx_data_t) * FFT_MAX_NUM_PTS);
	if (result_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the result buffer.\n\r");
		return -1;
	}

	convert_buf = (short *)malloc(sizeof(short) * FFT_MAX_NUM_PTS);
	if (convert_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the convert buffer.\n\r");
		return -1;
	}

	// Fill stimulus buffer with some signal
	memcpy(stim_buf, test_data, sizeof(cplx_data_t) * FFT_MAX_NUM_PTS);

	// Make sure the buffer is clear before we populate it (this is generally not necessary and wastes time doing memory accesses, but for proving the DMA working, we do it anyway)
	memset(result_buf, 0, sizeof(cplx_data_t) * FFT_MAX_NUM_PTS);
	memset(convert_buf, 0, sizeof(short) * FFT_MAX_NUM_PTS);

	status = fft(p_fft_inst, (cplx_data_t *)stim_buf, (cplx_data_t *)result_buf);
	if (status != FFT_SUCCESS)
	{
		xil_printf("ERROR! FFT failed.\n\r");
		return -1;
	}

	fft_convert_normalized(p_fft_inst, convert_buf);

	// filter_fft(p_fft_inst);

	xil_printf("FFT complete!\n\r");
	// fft_print_normalized(p_fft_inst);

	int ii = 0;
	char str[25]; // Large enough to hold 2 ints plus extra characters

	for (ii = 0; ii < 1024; ii++)
	{
		cplx_data_get_normalized_string(str, convert_buf[ii]);
		xil_printf("Xk(%d) = %s\n\r", ii, str);
	}

	*(baseaddr_p + 0) = 0x10012002;
	xil_printf("Wrote: 0x%08x \n\r", *(baseaddr_p + 0));

	*(baseaddr_p + 1) = 0x40040001;
	xil_printf("Wrote: 0x%08x \n\r", *(baseaddr_p + 1));

	// Read multiplier output from register 1
	xil_printf("Read : 0x%08x \n\r", *(baseaddr_p + 2));

	free(stim_buf);
	free(result_buf);
	fft_destroy(p_fft_inst);

	return 0;
}
