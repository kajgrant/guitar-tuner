
//////////////////////////////////////////////////////////////////////////////////
//
// Company:        Xilinx
// Engineer:       bwiec
// Create Date:    29 June 2015, 03:34:03 PM
// App Name:       DMA Accelerator Demonstration
// File Name:      helloworld.c
// Target Devices: Zynq
// Tool Versions:  2015.1
// Description:    Implementation of FFT using a hardware accelerator with DMA.
// Dependencies:
//   - xuartps_hw.h - Driver version v3.0
//   - fft.h        - Driver version v1.0
//   - cplx_data.h  - Driver version v1.0
//   - stim.h       - Driver version v1.0
// Revision History:
//   - v1.0
//     * Initial release
//     * Tested on ZC702 and Zedboard
// Additional Comments:
//   - UART baud rate is 115200
//   - GPIO is used with some additional glue logic to control the FFT core's
//     config interface for setting various parameters.
//
//////////////////////////////////////////////////////////////////////////////////

// Includes
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "xuartps_hw.h"
#include "fft.h"
#include "hps.h"
#include "cplx_data.h"
//#include "stim.h"
#include "xbasic_types.h"
#include "audio.h"
#include "hanning.h"

#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR
#define NUM_POINTS FFT_MAX_NUM_PTS
#define NUM_HPS_POINTS NUM_POINTS / 4
#define FREQ_SCALE_FACTOR 1.15001276036
#define SHARED_ADDRESS 0x0F000000

// External data
//extern int test_data[FFT_MAX_NUM_PTS]; // FFT input data

int * shared_pointer = (int *)SHARED_ADDRESS;

void fill_input(cplx_data_t *stim_buf){

	u32 in_left, in_right;
	int16_t left_16, right_16;

	for (int i = 0; i < NUM_POINTS; i++){
		in_left = Xil_In32(I2S_DATA_RX_L_REG);
		in_right = Xil_In32(I2S_DATA_RX_R_REG);

		in_left = in_left >> 8;
		in_right = in_right >> 8;

		left_16 = in_left;
		right_16 = in_right;

		stim_buf[i].data_re = (left_16 + right_16);
		stim_buf[i].data_im = 0;
		usleep(21 * 4);
	}

}

void init_uart()
{
	u32 CntrlRegister;
	CntrlRegister = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_CR_OFFSET);

	XUartPs_WriteReg(UART_BASEADDR, XUARTPS_CR_OFFSET,
					 ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
					  XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));
}

// Main entry point
int main()
{

	// Local variables
	int status = 0;
	fft_t *p_fft_inst;
	cplx_data_t *stim_buf;
	cplx_data_t *result_buf;
	short *convert_buf;
	long *final_out_buf;
	int *input_data;

	XIicPs *Iic;

	//Configure the IIC data structure
	Iic = (XIicPs *)malloc(sizeof(XIicPs));
	IicConfig(XPAR_XIICPS_0_DEVICE_ID, Iic);

	//Configure the Audio Codec's PLL
	AudioPllConfig(Iic);

	//Configure the Line in and Line out ports.
	//Call LineInLineOutConfig() for a configuration that
	//enables the HP jack too.
	AudioConfigureJacks(Iic);

	// Setup UART and enable caches
	init_uart();
	xil_printf("\fHello World!\n\r");

	//audio_stream();

	// Create FFT object
	p_fft_inst = fft_create(
		XPAR_GPIO_1_DEVICE_ID,
		XPAR_AXIDMA_0_DEVICE_ID,
		XPAR_PS7_SCUGIC_0_DEVICE_ID,
		XPAR_FABRIC_CTRL_AXI_DMA_0_S2MM_INTROUT_INTR,
		XPAR_FABRIC_CTRL_AXI_DMA_0_MM2S_INTROUT_INTR);
	if (p_fft_inst == NULL)
	{
		xil_printf("ERROR! Failed to create FFT instance.\n\r");
		return -1;
	}

	fft_set_num_pts(p_fft_inst, NUM_POINTS);

	// Allocate data buffers
	stim_buf = (cplx_data_t *)malloc(sizeof(cplx_data_t) * FFT_MAX_NUM_PTS);
	if (stim_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the stimulus buffer.\n\r");
		return -1;
	}

	result_buf = (cplx_data_t *)malloc(sizeof(cplx_data_t) * FFT_MAX_NUM_PTS);
	if (result_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the result buffer.\n\r");
		return -1;
	}

	convert_buf = (short *)malloc(sizeof(short) * FFT_MAX_NUM_PTS);
	if (convert_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the convert buffer.\n\r");
		return -1;
	}

	input_data = (int *)malloc(sizeof(int) * FFT_MAX_NUM_PTS);
	if (input_data == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the input buffer.\n\r");
		return -1;
	}

	final_out_buf = (long *)malloc(sizeof(long) * FFT_MAX_NUM_PTS);
	if (final_out_buf == NULL)
	{
		xil_printf("ERROR! Failed to allocate memory for the final output buffer.\n\r");
		return -1;
	}


	while (1){

		fill_input(stim_buf);

		status = fft(p_fft_inst, (cplx_data_t *)stim_buf, (cplx_data_t *)result_buf);
		if (status != FFT_SUCCESS)
		{
			xil_printf("ERROR! FFT failed.\n\r");
			return -1;
		}

		fft_convert_normalized(p_fft_inst, convert_buf);

		hps(convert_buf, final_out_buf, NUM_POINTS);

		int fund_freq = detect_fundamental_freq(final_out_buf, NUM_HPS_POINTS);
		if (fund_freq > 10){
			float fl_fund_freq = fund_freq * FREQ_SCALE_FACTOR;
			*shared_pointer = (int) fl_fund_freq;
			printf("FUNDAMENTAL FREQUENCY = %f\r\n", fl_fund_freq);
		}

	}

	free(stim_buf);
	free(result_buf);
	free(convert_buf);
	free(final_out_buf);
	fft_destroy(p_fft_inst);

	return 0;
}
